
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000004 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccyqwrMN.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800030a l       .text	00000000 LoopCopyDataInit
08000302 l       .text	00000000 CopyDataInit
08000322 l       .text	00000000 LoopFillZerobss
0800031c l       .text	00000000 FillZerobss
08000336 l       .text	00000000 LoopForever
08000350 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 main.c
20000004 l     O .bss	00000002 tick.6969
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /home/kevin/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /home/kevin/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 
20000008 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000008 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08000350  w    F .text	00000004 RTC_Alarm_IRQHandler
08000350  w    F .text	00000004 TIM8_TRG_COM_IRQHandler
08000350  w    F .text	00000004 TIM8_CC_IRQHandler
08000350  w    F .text	00000004 DebugMon_Handler
08000350  w    F .text	00000004 TIM1_CC_IRQHandler
08000350  w    F .text	00000004 HardFault_Handler
08000350  w    F .text	00000004 USB_HP_IRQHandler
08000188 g     F .text	00000028 SysTick_Handler
08000350  w    F .text	00000004 PVD_IRQHandler
080003bc g       .text	00000000 _sidata
08000350  w    F .text	00000004 PendSV_Handler
08000350  w    F .text	00000004 NMI_Handler
08000350  w    F .text	00000004 EXTI3_IRQHandler
080003bc g       .text	00000000 _etext
20000004 g       .bss	00000000 _sbss
08000350  w    F .text	00000004 EXTI0_IRQHandler
08000350  w    F .text	00000004 I2C2_EV_IRQHandler
08000350  w    F .text	00000004 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08000350  w    F .text	00000004 EXTI2_TS_IRQHandler
08000350  w    F .text	00000004 TIM1_UP_TIM16_IRQHandler
08000350  w    F .text	00000004 UsageFault_Handler
08000350  w    F .text	00000004 ADC1_2_IRQHandler
20000000 g       .data	00000000 _sdata
08000350  w    F .text	00000004 SPI1_IRQHandler
08000350  w    F .text	00000004 TIM6_DAC_IRQHandler
08000350  w    F .text	00000004 TIM8_UP_IRQHandler
08000354 g     F .text	00000050 __libc_init_array
08000350  w    F .text	00000004 DMA2_Channel2_IRQHandler
08000350  w    F .text	00000004 DMA1_Channel4_IRQHandler
080003a4 g     F .text	00000000 _init
08000350  w    F .text	00000004 USART3_IRQHandler
20000008 g       .bss	00000000 _ebss
08000350  w    F .text	00000004 DMA1_Channel7_IRQHandler
080002fc  w    F .text	0000003e Reset_Handler
08000350  w    F .text	00000004 CAN1_RX1_IRQHandler
08000350  w    F .text	00000004 UART5_IRQHandler
08000350  w    F .text	00000004 ADC3_IRQHandler
08000350  w    F .text	00000004 TIM4_IRQHandler
08000350  w    F .text	00000004 DMA2_Channel1_IRQHandler
08000350  w    F .text	00000004 I2C1_EV_IRQHandler
08000350  w    F .text	00000004 DMA1_Channel6_IRQHandler
08000350  w    F .text	00000004 UART4_IRQHandler
08000350  w    F .text	00000004 DMA2_Channel4_IRQHandler
08000350  w    F .text	00000004 TIM3_IRQHandler
08000350  w    F .text	00000004 RCC_IRQHandler
20000004 g       .bss	00000000 _bss
08000350  w    F .text	00000004 DMA1_Channel1_IRQHandler
08000350 g       .text	00000004 Default_Handler
08000350  w    F .text	00000004 USBWakeUp_RMP_IRQHandler
08000350  w    F .text	00000004 EXTI15_10_IRQHandler
08000350  w    F .text	00000004 TIM7_IRQHandler
08000350  w    F .text	00000004 EXTI9_5_IRQHandler
08000350  w    F .text	00000004 TAMPER_STAMP_IRQHandler
08000350  w    F .text	00000004 RTC_WKUP_IRQHandler
08000350  w    F .text	00000004 SPI2_IRQHandler
08000350  w    F .text	00000004 MemManage_Handler
080001b0 g     F .text	00000050 main
08000350  w    F .text	00000004 SVC_Handler
08000350  w    F .text	00000004 DMA2_Channel5_IRQHandler
00000000  w      *UND*	00000000 __init_array_end
08000350  w    F .text	00000004 DMA1_Channel5_IRQHandler
08000350  w    F .text	00000004 USB_LP_IRQHandler
08000350  w    F .text	00000004 EXTI4_IRQHandler
08000350  w    F .text	00000004 USB_LP_CAN1_RX0_IRQHandler
08000200 g     F .text	000000fc SystemInit
080003b0 g     F .text	00000000 _fini
08000350  w    F .text	00000004 TIM1_TRG_COM_TIM17_IRQHandler
08000350  w    F .text	00000004 USB_HP_CAN1_TX_IRQHandler
08000350  w    F .text	00000004 DMA1_Channel3_IRQHandler
08000350  w    F .text	00000004 ADC4_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08000350  w    F .text	00000004 WWDG_IRQHandler
20000000 g       .data	00000000 _data
08000350  w    F .text	00000004 TIM2_IRQHandler
08000350  w    F .text	00000004 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08000350  w    F .text	00000004 COMP1_2_3_IRQHandler
08000350  w    F .text	00000004 EXTI1_IRQHandler
20000004 g       .data	00000000 _edata
08000350  w    F .text	00000004 USART2_IRQHandler
08000350  w    F .text	00000004 COMP4_5_6_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000350  w    F .text	00000004 I2C2_ER_IRQHandler
08000350  w    F .text	00000004 DMA1_Channel2_IRQHandler
08000350  w    F .text	00000004 TIM8_BRK_IRQHandler
00000000  w      *UND*	00000000 __init_array_start
08000350  w    F .text	00000004 CAN1_SCE_IRQHandler
08000350  w    F .text	00000004 FLASH_IRQHandler
08000350  w    F .text	00000004 BusFault_Handler
08000350  w    F .text	00000004 USART1_IRQHandler
08000350  w    F .text	00000004 SPI3_IRQHandler
08000350  w    F .text	00000004 I2C1_ER_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_start
08000350  w    F .text	00000004 USBWakeUp_IRQHandler
08000350  w    F .text	00000004 DMA2_Channel3_IRQHandler
08000350  w    F .text	00000004 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <SysTick_Handler>:
#include "stm32f30x_conf.h"

void SysTick_Handler(void) {
  static uint16_t tick = 0;

  switch (tick++) {
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <SysTick_Handler+0x20>)
 800018a:	881a      	ldrh	r2, [r3, #0]
 800018c:	2a64      	cmp	r2, #100	; 0x64
 800018e:	d002      	beq.n	8000196 <SysTick_Handler+0xe>
 8000190:	3201      	adds	r2, #1
 8000192:	801a      	strh	r2, [r3, #0]
 8000194:	4770      	bx	lr
  	case 100:
  		tick = 0;
 8000196:	2200      	movs	r2, #0
 8000198:	801a      	strh	r2, [r3, #0]
  		GPIOC->ODR ^= (1 << 8);
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <SysTick_Handler+0x24>)
 800019c:	8a9a      	ldrh	r2, [r3, #20]
 800019e:	b292      	uxth	r2, r2
 80001a0:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80001a4:	829a      	strh	r2, [r3, #20]
 80001a6:	4770      	bx	lr
 80001a8:	20000004 	.word	0x20000004
 80001ac:	48000800 	.word	0x48000800

080001b0 <main>:
}

int main(void)
{

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; 	// enable the clock to GPIOC
 80001b0:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <main+0x3c>)
 80001b2:	695a      	ldr	r2, [r3, #20]
 80001b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80001b8:	615a      	str	r2, [r3, #20]
						//(RM0091 lists this as IOPCEN, not GPIOCEN)

	GPIOC->MODER = (1 << 16);
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <main+0x40>)
 80001bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001c0:	601a      	str	r2, [r3, #0]

	SysTick_Config(SystemCoreClock/100);
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <main+0x44>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	2364      	movs	r3, #100	; 0x64
 80001c8:	fbb2 f3f3 	udiv	r3, r2, r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001d0:	d300      	bcc.n	80001d4 <main+0x24>
 80001d2:	e7fe      	b.n	80001d2 <main+0x22>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001d4:	1e5a      	subs	r2, r3, #1
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <main+0x48>)
 80001d8:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001da:	4a08      	ldr	r2, [pc, #32]	; (80001fc <main+0x4c>)
 80001dc:	21f0      	movs	r1, #240	; 0xf0
 80001de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001e2:	2200      	movs	r2, #0
 80001e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001e6:	2207      	movs	r2, #7
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	e7f2      	b.n	80001d2 <main+0x22>
 80001ec:	40021000 	.word	0x40021000
 80001f0:	48000800 	.word	0x48000800
 80001f4:	20000000 	.word	0x20000000
 80001f8:	e000e010 	.word	0xe000e010
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000200:	4b39      	ldr	r3, [pc, #228]	; (80002e8 <SystemInit+0xe8>)
 8000202:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000206:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800020a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800020e:	4b37      	ldr	r3, [pc, #220]	; (80002ec <SystemInit+0xec>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f042 0201 	orr.w	r2, r2, #1
 8000216:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000218:	6859      	ldr	r1, [r3, #4]
 800021a:	4a35      	ldr	r2, [pc, #212]	; (80002f0 <SystemInit+0xf0>)
 800021c:	400a      	ands	r2, r1
 800021e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000226:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800022a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000232:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800023a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800023c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800023e:	f022 020f 	bic.w	r2, r2, #15
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000246:	4a2b      	ldr	r2, [pc, #172]	; (80002f4 <SystemInit+0xf4>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000248:	b082      	sub	sp, #8

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800024a:	400a      	ands	r2, r1
 800024c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000252:	9200      	str	r2, [sp, #0]
 8000254:	9201      	str	r2, [sp, #4]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800025c:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000264:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000266:	9a00      	ldr	r2, [sp, #0]
 8000268:	3201      	adds	r2, #1
 800026a:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800026c:	9a01      	ldr	r2, [sp, #4]
 800026e:	b91a      	cbnz	r2, 8000278 <SystemInit+0x78>
 8000270:	9a00      	ldr	r2, [sp, #0]
 8000272:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000276:	d1f2      	bne.n	800025e <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800027e:	bf18      	it	ne
 8000280:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000282:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000284:	9a01      	ldr	r2, [sp, #4]
 8000286:	2a01      	cmp	r2, #1
 8000288:	d005      	beq.n	8000296 <SystemInit+0x96>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <SystemInit+0xe8>)
 800028c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000290:	609a      	str	r2, [r3, #8]
#endif  
}
 8000292:	b002      	add	sp, #8
 8000294:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000296:	4a18      	ldr	r2, [pc, #96]	; (80002f8 <SystemInit+0xf8>)
 8000298:	2112      	movs	r1, #18
 800029a:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800029c:	685a      	ldr	r2, [r3, #4]
 800029e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002aa:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002b2:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002ba:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002c2:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002c4:	6819      	ldr	r1, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <SystemInit+0xec>)
 80002c8:	0189      	lsls	r1, r1, #6
 80002ca:	d5fb      	bpl.n	80002c4 <SystemInit+0xc4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002cc:	6851      	ldr	r1, [r2, #4]
 80002ce:	f021 0103 	bic.w	r1, r1, #3
 80002d2:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002d4:	6851      	ldr	r1, [r2, #4]
 80002d6:	f041 0102 	orr.w	r1, r1, #2
 80002da:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80002dc:	685a      	ldr	r2, [r3, #4]
 80002de:	f002 020c 	and.w	r2, r2, #12
 80002e2:	2a08      	cmp	r2, #8
 80002e4:	d1fa      	bne.n	80002dc <SystemInit+0xdc>
 80002e6:	e7d0      	b.n	800028a <SystemInit+0x8a>
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	40021000 	.word	0x40021000
 80002f0:	f87fc00c 	.word	0xf87fc00c
 80002f4:	ff00fccc 	.word	0xff00fccc
 80002f8:	40022000 	.word	0x40022000

080002fc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002fe:	f000 b804 	b.w	800030a <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000304:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000306:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000308:	3104      	adds	r1, #4

0800030a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800030a:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0xa>)
	ldr	r3, =_edata
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <LoopForever+0xe>)
	adds	r2, r0, r1
 800030e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000310:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000312:	f4ff aff6 	bcc.w	8000302 <CopyDataInit>
	ldr	r2, =_sbss
 8000316:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000318:	f000 b803 	b.w	8000322 <LoopFillZerobss>

0800031c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800031c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800031e:	f842 3b04 	str.w	r3, [r2], #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <LoopForever+0x16>)
	cmp	r2, r3
 8000324:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000326:	f4ff aff9 	bcc.w	800031c <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800032a:	f7ff ff69 	bl	8000200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800032e:	f000 f811 	bl	8000354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000332:	f7ff ff3d 	bl	80001b0 <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	f7ff bffe 	b.w	8000336 <LoopForever>
 800033a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800033c:	080003bc 	.word	0x080003bc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000340:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000344:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000348:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800034c:	20000008 	.word	0x20000008

08000350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000350:	f7ff bffe 	b.w	8000350 <ADC1_2_IRQHandler>

08000354 <__libc_init_array>:
 8000354:	b570      	push	{r4, r5, r6, lr}
 8000356:	4e0f      	ldr	r6, [pc, #60]	; (8000394 <__libc_init_array+0x40>)
 8000358:	4d0f      	ldr	r5, [pc, #60]	; (8000398 <__libc_init_array+0x44>)
 800035a:	1b76      	subs	r6, r6, r5
 800035c:	10b6      	asrs	r6, r6, #2
 800035e:	d007      	beq.n	8000370 <__libc_init_array+0x1c>
 8000360:	3d04      	subs	r5, #4
 8000362:	2400      	movs	r4, #0
 8000364:	3401      	adds	r4, #1
 8000366:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800036a:	4798      	blx	r3
 800036c:	42a6      	cmp	r6, r4
 800036e:	d1f9      	bne.n	8000364 <__libc_init_array+0x10>
 8000370:	4e0a      	ldr	r6, [pc, #40]	; (800039c <__libc_init_array+0x48>)
 8000372:	4d0b      	ldr	r5, [pc, #44]	; (80003a0 <__libc_init_array+0x4c>)
 8000374:	1b76      	subs	r6, r6, r5
 8000376:	f000 f815 	bl	80003a4 <_init>
 800037a:	10b6      	asrs	r6, r6, #2
 800037c:	d008      	beq.n	8000390 <__libc_init_array+0x3c>
 800037e:	3d04      	subs	r5, #4
 8000380:	2400      	movs	r4, #0
 8000382:	3401      	adds	r4, #1
 8000384:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8000388:	4798      	blx	r3
 800038a:	42a6      	cmp	r6, r4
 800038c:	d1f9      	bne.n	8000382 <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	bf00      	nop
	...

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr
